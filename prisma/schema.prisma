generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  EMPLOYE
  TECHNICIEN
  CHEF_DSI
}

enum Statut {
  OPEN
  IN_PROGRESS
  A_CLOTURER
  REJETE
  TRANSFERE_MANTICE
  CLOSED
}

enum TypeTicket {
  ASSISTANCE
  INTERVENTION
}

model Departement {
  id            Int           @id @default(autoincrement())
  nom           String        @unique
  employes      Utilisateur[]
  tickets       Ticket[]
  responsableId Int?
  responsable   Utilisateur?  @relation("DepartementResponsable", fields: [responsableId], references: [id])
}

model Utilisateur {
  id            Int          @id @default(autoincrement())
  nom           String
  prenom        String
  email         String       @unique
  motDePasse    String
  role          Role         @default(EMPLOYE)
  matricule     String?      @unique
  departementId Int?
  departement   Departement? @relation(fields: [departementId], references: [id])

  /// Code hiérarchique : 0 = employé simple, 1+ = niveaux de supervision
  /// Plus le code est élevé, plus le niveau hiérarchique est haut
  codeHierarchique Int @default(0)

  // Relations existantes
  tickets             Ticket[]       @relation("EmployeTickets")
  ticketsAssignes     Ticket[]       @relation("TechnicienTickets")
  notifications       Notification[]
  createdAt           DateTime       @default(now())
  commentairesRediges Commentaire[]  @relation("CommentaireAuteur")

  // Relation opposée responsable
  departementsResponsables Departement[] @relation("DepartementResponsable")

  @@index([departementId, codeHierarchique])
}

model Application {
  id      Int      @id @default(autoincrement())
  nom     String   @unique
  tickets Ticket[]
}

model Materiel {
  id      Int      @id @default(autoincrement())
  nom     String   @unique
  tickets Ticket[]
}

model Ticket {
  id           Int        @id @default(autoincrement())
  description  String
  dateCreation DateTime   @default(now())
  statut       Statut     @default(OPEN)
  type         TypeTicket

  createdById Int
  createdBy   Utilisateur @relation("EmployeTickets", fields: [createdById], references: [id])

  assignedToId Int?
  assignedTo   Utilisateur? @relation("TechnicienTickets", fields: [assignedToId], references: [id])

  departementId Int?
  departement   Departement? @relation(fields: [departementId], references: [id])

  applicationId Int?
  application   Application? @relation(fields: [applicationId], references: [id])

  materielId Int?
  materiel   Materiel? @relation(fields: [materielId], references: [id])

  prisEnChargeAt         DateTime?
  clotureAt              DateTime?
  dureeTraitementMinutes Int?

  manticeNumero String?
  manticeAt     DateTime?

  notifications Notification[]
  piecesJointes PieceJointe[]
  commentaires  Commentaire[]
  mailSentAt    DateTime?
}

model Commentaire {
  id        Int         @id @default(autoincrement())
  contenu   String      @db.Text
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  ticketId  Int
  ticket    Ticket      @relation(fields: [ticketId], references: [id])
  auteurId  Int
  auteur    Utilisateur @relation("CommentaireAuteur", fields: [auteurId], references: [id])

  @@index([ticketId, createdAt])
}

model Notification {
  id        Int         @id @default(autoincrement())
  message   String
  dateEnvoi DateTime    @default(now())
  ticketId  Int
  ticket    Ticket      @relation(fields: [ticketId], references: [id])
  userId    Int
  user      Utilisateur @relation(fields: [userId], references: [id])
  isRead    Boolean     @default(false)
}

model PieceJointe {
  id         Int      @id @default(autoincrement())
  nomFichier String
  chemin     String
  dateAjout  DateTime @default(now())
  ticketId   Int
  ticket     Ticket   @relation(fields: [ticketId], references: [id])
}